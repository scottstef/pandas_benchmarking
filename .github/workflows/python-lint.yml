name: Python Linting with Score

on:
  push:
    branches: ['*']
  pull_request: 
    branches: ['*']

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          # Fetch all history for generating score history
          fetch-depth: 0
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 black pylint isort
          pip install pandas numpy dask matplotlib pyspark
          if [ -f requirements.txt ]; then pip install -r requirements.txt || true; fi
      
      - name: Lint with flake8
        run: |
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=120 --statistics
      
          - name: Lint with pylint and capture score
          id: pylint
          run: |
            # Run pylint and save output
            pylint --rcfile=pylintrc $(git ls-files '*.py') > pylint_output.txt 2>&1 || true
            
            # Alternative extraction using awk
            PYLINT_SCORE=$(awk '/Your code has been rated at/ {print $7}' pylint_output.txt | cut -d'/' -f1 || echo "0.00")
            
            # Save score to output
            echo "score=$PYLINT_SCORE" >> $GITHUB_OUTPUT
            
            echo "Pylint Score: $PYLINT_SCORE"
      
      - name: Create Pylint Badge
        if: always() && steps.pylint.outputs.score != ''
        run: |
          SCORE="${{ steps.pylint.outputs.score }}"
          
          # Determine badge color based on score
          if (( $(echo "$SCORE < 5.0" | bc -l) )); then
            COLOR="red"
          elif (( $(echo "$SCORE < 7.0" | bc -l) )); then
            COLOR="orange"
          elif (( $(echo "$SCORE < 9.0" | bc -l) )); then
            COLOR="yellow"
          else
            COLOR="green"
          fi
          
          # Create badge markdown
          echo "[![Pylint Score](https://img.shields.io/badge/pylint-${SCORE}%2F10-${COLOR})](https://github.com/${{ github.repository }}/actions)" > pylint-badge.md
          
          mkdir -p .github/badges
          cp pylint-badge.md .github/badges/
      
      - name: Commit Badge
        if: always() && github.event_name == 'push' && github.ref == 'refs/heads/main' && steps.pylint.outputs.score != ''
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add .github/badges/pylint-badge.md
          git commit -m "Update pylint badge [skip ci]" || echo "No changes to commit"
          git push || echo "Failed to push changes"
      
      - name: Save Score History
        if: always() && github.event_name == 'push' && github.ref == 'refs/heads/main' && steps.pylint.outputs.score != ''
        run: |
          SCORE="${{ steps.pylint.outputs.score }}"
          DATE=$(date +"%Y-%m-%d")
          
          mkdir -p .github/pylint-history
          
          # Create CSV file if it doesn't exist
          if [ ! -f .github/pylint-history/scores.csv ]; then
            echo "date,score" > .github/pylint-history/scores.csv
          fi
          
          # Append new score
          echo "$DATE,$SCORE" >> .github/pylint-history/scores.csv
          
          # Commit changes
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add .github/pylint-history/scores.csv
          git commit -m "Update pylint score history [skip ci]" || echo "No changes to commit"
          git push || echo "Failed to push changes"
      
      - name: Check formatting with black
        continue-on-error: true
        run: |
          black --check --diff .
      
      - name: Check import order with isort
        continue-on-error: true
        run: |
          isort --check-only --profile black --diff .